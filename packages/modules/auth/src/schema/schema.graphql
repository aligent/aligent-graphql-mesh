schema {
    mutation: Mutation
    query: Query
}

type Query {
    getUserAuth(refresh_token: String): GetAuthUser
}

type Mutation {
    """
    Generate a token for specified customer.
    """
    generateCustomerToken(
        """
        The customer's email address.
        """
        email: String!
        """
        The customer's password.
        """
        password: String!
        """
        Determines if the users session should be extended
        """
        remember_me: Boolean
    ): CustomerToken
    """
    Generate a token for specified customer.
    """
    refreshCustomerToken(
        """
        The customers refresh token used to generate a new access token
        """
        refresh_token: String!
    ): CustomerToken
    removeUserAuth(refresh_token: String): RemoveUserAuth
    revokeCustomerToken(refresh_token: String): RevokeCustomerTokenOutput
    updateUserAuth(refresh_token: String): UpdateUserAuth
}

type GetAuthUser {
    customer_id: String
    refresh_token_hash: String
    ttl: String
}

type RemoveUserAuth {
    """
    status of removing a user refresh token
    """
    success: Boolean
}

type UpdateUserAuth {
    """
    status of updating a user refresh token
    """
    success: Boolean
}

"""
Contains a customer authorization token.
"""
type CustomerToken {
    """
    The customers access token.
    """
    token: String
    """
    The customers refresh token used to generate a new access token
    """
    refresh_token: String
}

"""
Contains the result of a request to revoke a customer token.
"""
type RevokeCustomerTokenOutput {
    """
    The result of a request to revoke a customer token.
    """
    result: Boolean!
}
